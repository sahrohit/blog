---
import { type CollectionEntry } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import getPagination from "@utils/getPagination";
import { getNotionCollection } from "@lib/notion/client";

export interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const notionPosts = await getNotionCollection();

  const postResult = notionPosts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));

  const pagePaths = getPageNumbers(notionPosts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const posts = await getNotionCollection();
const sortedPosts = getSortedPosts(posts);
const currentPostIndex = sortedPosts.findIndex(post => post.slug === slug);
const prevPost = sortedPosts[currentPostIndex + 1];
const nextPost = sortedPosts[currentPostIndex - 1];

const pagination = getPagination({
  posts: sortedPosts,
  page: slug,
});
---

{
  post ? (
    <PostDetails post={post} prevPost={prevPost} nextPost={nextPost} />
  ) : (
    <Posts {...pagination} />
  )
}
